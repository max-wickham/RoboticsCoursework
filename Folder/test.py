import numpy as np
import re


def multiply(m0,m1):
    matrix = []
    for row in m0:
        new_row = []
        for i in range(len(m1[0])):
            column = [x[i] for x in m1]
            # print(row)
            # print(column)
            #array = [(row[j] + column[j]) for j in range(len(column))])
            t = []
            for j in range(len(column)):
                if row[j] == '(0)' or column[j] == '(0)' or row[j] == '0' or column[j] == '0':
                    t.append('0')
                else:
                    t.append(row[j] + '*' +  column[j])
            r = filter(lambda val: val !=  '0', t) 
            total = '(' + "+".join(r)  + ')'
            total = total if total != '()' else '(0)'
            new_row.append(total)
            
        matrix.append(new_row)
    return matrix


matrix_0 = [['C_0', '-S_0', '0', '0'], ['S_0', 'C_0', '0', '0'], ['0', '0', '1', 'D0'], ['0', '0', '0', '1']]
matrix_1 = [['C_1', '-S_1', '0', '0'], ['0', '0', '-1', '0'], ['S_1', 'C_1', '0', '0'], ['0', '0', '0', '1']]
matrix_2 = [['C_2', '-S_2', '0', 'A_1'], ['S_2', 'C_2', '0', '0'], ['0', '0', '1', '0'], ['0', '0', '0', '1']]
matrix_3 = [['C_3', '-S_3', '0', 'A2'], ['S_3', 'C_3', '0', '0'], ['0', '0', '1', '0'], ['0', '0', '0', '1']]
matrix_4 = [['1', '0', '0', 'A3'], ['0', '1', '0', '0'], ['0', '0', '1', '0'], ['0', '0', '0', '1']]

matrix = multiply(matrix_0,matrix_1)
t0t1 = matrix
matrix = multiply(t0t1,matrix_2)
t0t1t2 = matrix
t0t1t2 = [['((C_0*C_1)*C_2+(C_0*-S_1)*S_2)', '((C_0*C_1)*-S_2+(C_0*-S_1)*C_2)', '(S_0)', '((C_0*C_1)*A_1)'], 
['((S_0*C_1)*C_2+(S_0*-S_1)*S_2)', '((S_0*C_1)*-S_2+(S_0*-S_1)*C_2)', '(C_0*-1)', '((S_0*C_1)*A_1)'], 
['((S_1)*C_2+(C_1)*S_2)', '((S_1)*-S_2+(C_1)*C_2)', '(0)', '((S_1)*A_1+(D0))'],
 ['(0)', '(0)', '(0)', '(1)']]
matrix = multiply(t0t1t2,matrix_3)
t0t1t2t3 = matrix
print(matrix)
matrix = multiply(t0t1t2t3,matrix_4)
t0t1t2t3t4 = matrix
print(matrix)

t0t1 = [['(C_0*C_1)', '(C_0*-S_1)', '(-S_0*-1)', '(0)'],
 ['(S_0*C_1)', '(S_0*-S_1)', '(C_0*-1)', '(0)'],
  ['(1*S_1)', '(1*C_1)', '(0)', '(D0*1)'],
   ['(0)', '(0)', '(0)', '(1*1)']]

t0t1t2 = [['((C_0*C_1)*C_2+(C_0*-S_1)*S_2)', '((C_0*C_1)*-S_2+(C_0*-S_1)*C_2)', '(S_0)', '((C_0*C_1)*A_1)'], 
['((S_0*C_1)*C_2+(S_0*-S_1)*S_2)', '((S_0*C_1)*-S_2+(S_0*-S_1)*C_2)', '(C_0*-1)', '((S_0*C_1)*A_1)'], 
['((S_1)*C_2+(C_1)*S_2)', '((S_1)*-S_2+(C_1)*C_2)', '(0)', '((S_1)*A_1+(D0))'],
 ['(0)', '(0)', '(0)', '(1)']]

t0t1t2t3 = [['(((C_0*C_1)*C_2+(C_0*-S_1)*S_2)*C_3+((C_0*C_1)*-S_2+(C_0*-S_1)*C_2)*S_3)', '(((C_0*C_1)*C_2+(C_0*-S_1)*S_2)*-S_3+((C_0*C_1)*-S_2+(C_0*-S_1)*C_2)*C_3)', '((S_0)*1)', '(((C_0*C_1)*C_2+(C_0*-S_1)*S_2)*A2+((C_0*C_1)*A_1)*1)'],
['(((S_0*C_1)*C_2+(S_0*-S_1)*S_2)*C_3+((S_0*C_1)*-S_2+(S_0*-S_1)*C_2)*S_3)', '(((S_0*C_1)*C_2+(S_0*-S_1)*S_2)*-S_3+((S_0*C_1)*-S_2+(S_0*-S_1)*C_2)*C_3)', '((C_0*-1))', '(((S_0*C_1)*C_2+(S_0*-S_1)*S_2)*A2+((S_0*C_1)*A_1)*1)'], 
['(((S_1)*C_2+(C_1)*S_2)*C_3+((S_1)*-S_2+(C_1)*C_2)*S_3)', '(((S_1)*C_2+(C_1)*S_2)*-S_3+((S_1)*-S_2+(C_1)*C_2)*C_3)', '(0)', '(((S_1)*C_2+(C_1)*S_2)*A2+((S_1)*A_1+(D0)))'],
 ['(0)', '(0)', '(0)', '(1)']]

t0t1t2t3t4 = [['((((C_0*C_1)*C_2+(C_0*-S_1)*S_2)*C_3+((C_0*C_1)*-S_2+(C_0*-S_1)*C_2)*S_3))', '((((C_0*C_1)*C_2+(C_0*-S_1)*S_2)*-S_3+((C_0*C_1)*-S_2+(C_0*-S_1)*C_2)*C_3))', '(((S_0)))', '((((C_0*C_1)*C_2+(C_0*-S_1)*S_2)*C_3+((C_0*C_1)*-S_2+(C_0*-S_1)*C_2)*S_3)*A3+(((C_0*C_1)*C_2+(C_0*-S_1)*S_2)*A2+((C_0*C_1)*A_1)))'], ['((((S_0*C_1)*C_2+(S_0*-S_1)*S_2)*C_3+((S_0*C_1)*-S_2+(S_0*-S_1)*C_2)*S_3))', '((((S_0*C_1)*C_2+(S_0*-S_1)*S_2)*-S_3+((S_0*C_1)*-S_2+(S_0*-S_1)*C_2)*C_3))', '(((C_0*-1)))', '((((S_0*C_1)*C_2+(S_0*-S_1)*S_2)*C_3+((S_0*C_1)*-S_2+(S_0*-S_1)*C_2)*S_3)*A3+(((S_0*C_1)*C_2+(S_0*-S_1)*S_2)*A2+((S_0*C_1)*A_1)))'], ['((((S_1)*C_2+(C_1)*S_2)*C_3+((S_1)*-S_2+(C_1)*C_2)*S_3))', '((((S_1)*C_2+(C_1)*S_2)*-S_3+((S_1)*-S_2+(C_1)*C_2)*C_3))', '(0)', '((((S_1)*C_2+(C_1)*S_2)*C_3+((S_1)*-S_2+(C_1)*C_2)*S_3)*A3+(((S_1)*C_2+(C_1)*S_2)*A2+((S_1)*A_1+(D0))))'], ['(0)', '(0)', '(0)', '(1)']]

# def create_matrix(index):
#     i = str(index)
#     j = str(index-1)
#     S, Sm = 'S_' + i, '-S_' + i
#     C = 'C_' + i
#     A,A_ = 'A' + i,'A_' + j
#     D, D_ = 'D_' + i, 'D_' + j
#     Ca, Ca_ = 'Ca_' + i, 'Ca_' + j
#     Sa, Sa_, Sma_ = 'Sa_' + i, 'Sa_' + j, '-Sa_' + j
#     row_0 = [C, Sm, '0', A_]
#     row_1 = [S+Ca_,C+Ca_,Sma_,Sma_+D]
#     row_2 = [S+Sa_, C+Sa, Ca_, Ca_+D]
#     row_3 = ['0', '0', '0', '1']
#     return [row_0,row_1,row_2,row_3]


# matrix = create_matrix(0)
# print(matrix)
# for i in range(1,2):
#     print(i)
#     matrix = multiply(create_matrix(i),matrix)
# for x in matrix:
#     print(x)
# print(matrix)

# rx = [['1','0','0'],['0','Ca','-Sa'],['0','Sa','Ca']]
# rz = [['Cz','-Sz','0'],['Sz','Cz','0'],['1','0','0']]
# print(multiply(rx,rz))

# rxz = [['(1*Cx)', '(1*-Sx)', '(0)'], ['(Cx*Sx+-Sx*1)', '(Cx*Cx)', '(0)'], ['(Sx*Sx+Cx*1)', '(Sx*Cx)', '(0)']]
# rzx = [['(Cx*1)', '(-Sx*Cx)', '(-Sx*-Sx)'], ['(Sx*1)', '(Cx*Cx)', '(Cx*-Sx)'], ['(1*1)', '(0)', '(0)']]